name: "Build"

on:
  push:
    branches:
      - "main"
  pull_request:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  check:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      # https://zenn.dev/mierune/articles/2af7b9e447712a
      - uses: chetan/git-restore-mtime-action@v2
      - uses: extractions/setup-just@v3
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy,rustfmt
          cache-all-crates: true
      - uses: pnpm/action-setup@v4
        with:
          version: 10
      - uses: actions/setup-node@v4
        with:
          cache: "pnpm"
          cache-dependency-path: ./web/pnpm-lock.yaml
      - uses: taiki-e/install-action@v2
        with:
          tool: dioxus-cli
      - run: just setup
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: just check
      - run: just fmt && git diff --exit-code
    timeout-minutes: 15

  test:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      # https://zenn.dev/mierune/articles/2af7b9e447712a
      - uses: chetan/git-restore-mtime-action@v2
      - uses: extractions/setup-just@v3
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-all-crates: true
      - uses: pnpm/action-setup@v4
        with:
          version: 10
      - uses: actions/setup-node@v4
        with:
          cache: "pnpm"
          cache-dependency-path: ./web/pnpm-lock.yaml
      - uses: taiki-e/install-action@v2
        with:
          tool: dioxus-cli
      - run: just setup
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: just test
    timeout-minutes: 15

  build:
    needs: ["check", "test"]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      # https://zenn.dev/mierune/articles/2af7b9e447712a
      - uses: chetan/git-restore-mtime-action@v2
      - uses: extractions/setup-just@v3
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-all-crates: true
      - uses: pnpm/action-setup@v4
        with:
          version: 10
      - uses: actions/setup-node@v4
        with:
          cache: "pnpm"
          cache-dependency-path: ./web/pnpm-lock.yaml
      - uses: taiki-e/install-action@v2
        with:
          tool: dioxus-cli
      - run: just setup
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: just build
      - uses: actions/upload-artifact@v4
        with:
          name: arto-${{ runner.os }}
          path: |
            ./target/dx/arto/bundle/macos/bundle/dmg
          if-no-files-found: error
    timeout-minutes: 30

  release:
    if: ${{ github.event_name == 'release' }}
    needs: [build]
    runs-on: macos-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - run: find .
      - uses: ncipollo/release-action@v1.14.0
        with:
          allowUpdates: true
          artifactErrorsFailBuild: true
          artifacts: ./artifacts/arto-*/Arto_*.dmg
          removeArtifacts: true
          body: |
            ## macOS Installation

            ### Installation Steps (2 Security Approvals Required)

            Due to Apple's security requirements, you'll need to approve **both the DMG file and the app itself**.

            #### Step 1: Open the DMG File

            1. **Download** the `Arto_*.dmg` file from the Assets section below
            2. **Double-click the DMG file**
               - Security warning appears: *"Apple cannot verify that this disk image does not contain malware"*
               - Click "OK" to dismiss
            3. **Open System Settings**
               - Apple menu () → System Settings → Privacy & Security
            4. **Allow the DMG** (in Security section at bottom)
               - You'll see: *"Arto_*.dmg" was blocked from use*
               - Click **"Open Anyway"** button
               - Enter your password
               - The DMG will now open

            #### Step 2: Install and Open the App

            5. **Copy the app**
               - Drag **Arto.app** from the DMG to your **Applications** folder
            6. **Double-click Arto.app** to launch
               - Security warning appears again: *"Arto cannot be opened because..."*
               - Click "OK" to dismiss
            7. **Allow the app** (same process as DMG)
               - Open System Settings → Privacy & Security
               - Scroll to Security section
               - Find: *"Arto" was blocked from use*
               - Click **"Open Anyway"**
               - Enter your password
            8. **Launch complete**
               - Arto will now start normally
               - Future launches won't require approval

            ### Why Two Approvals Are Needed

            macOS treats the DMG container and the app inside separately. Since both are unsigned,
            each requires manual approval through System Settings. This is standard macOS security
            for applications without Apple Developer ID certificates.

            ### Quick Method (Terminal - for advanced users)

            ```bash
            # Remove quarantine from DMG
            xattr -d com.apple.quarantine Arto_*.dmg
            open Arto_*.dmg

            # After copying to Applications, remove quarantine from app
            xattr -cr /Applications/Arto.app
            open /Applications/Arto.app
            ```

            ### Note for macOS Sequoia (15.0+) Users

            The right-click → "Open" shortcut no longer works for unsigned apps.
            You must use System Settings → Privacy & Security as described above.

            ---

            For more information, see the [README](https://github.com/${{ github.repository }}).

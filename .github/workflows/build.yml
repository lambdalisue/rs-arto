name: "Build"

on:
  push:
    branches:
      - "main"
  pull_request:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  check:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      # https://zenn.dev/mierune/articles/2af7b9e447712a
      - uses: chetan/git-restore-mtime-action@v2
      - uses: extractions/setup-just@v3
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy,rustfmt
          cache-all-crates: true
      - uses: pnpm/action-setup@v4
        with:
          version: 10
      - uses: actions/setup-node@v4
        with:
          cache: "pnpm"
          cache-dependency-path: ./web/pnpm-lock.yaml
      - uses: taiki-e/install-action@v2
        with:
          tool: dioxus-cli
      - run: just setup
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: just check
      - run: just fmt && git diff --exit-code
    timeout-minutes: 15

  test:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      # https://zenn.dev/mierune/articles/2af7b9e447712a
      - uses: chetan/git-restore-mtime-action@v2
      - uses: extractions/setup-just@v3
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-all-crates: true
      - uses: pnpm/action-setup@v4
        with:
          version: 10
      - uses: actions/setup-node@v4
        with:
          cache: "pnpm"
          cache-dependency-path: ./web/pnpm-lock.yaml
      - uses: taiki-e/install-action@v2
        with:
          tool: dioxus-cli
      - run: just setup
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: just test
    timeout-minutes: 15

  build:
    needs: ["check", "test"]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      # https://zenn.dev/mierune/articles/2af7b9e447712a
      - uses: chetan/git-restore-mtime-action@v2
      - uses: extractions/setup-just@v3
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-all-crates: true
      - uses: pnpm/action-setup@v4
        with:
          version: 10
      - uses: actions/setup-node@v4
        with:
          cache: "pnpm"
          cache-dependency-path: ./web/pnpm-lock.yaml
      - uses: taiki-e/install-action@v2
        with:
          tool: dioxus-cli
      - run: just setup
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: just build
      - uses: actions/upload-artifact@v4
        with:
          name: arto-${{ runner.os }}
          path: |
            ./target/dx/arto/bundle/macos/bundle/dmg
          if-no-files-found: error
    timeout-minutes: 30

  release:
    if: ${{ github.event_name == 'release' }}
    needs: [build]
    runs-on: macos-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - run: find .
      - uses: ncipollo/release-action@v1.14.0
        with:
          allowUpdates: true
          artifactErrorsFailBuild: true
          artifacts: ./artifacts/arto-*/Arto_*.dmg
          removeArtifacts: true
          body: |
            ## macOS Installation

            ### Security Notice
            When downloading the DMG from GitHub, macOS may show a security warning:
            > "Apple cannot verify that this disk image does not contain malware"

            This is expected for applications without Apple Developer ID signature.

            ### How to Install

            **Option 1: Right-click method (Recommended)**
            1. Download the `Arto_*.dmg` file below
            2. Right-click (or Control+click) on the DMG file
            3. Select "Open" from the context menu
            4. Click "Open" in the security dialog
            5. Drag Arto.app to Applications folder

            **Option 2: Terminal method**
            ```bash
            # Remove quarantine attribute
            xattr -d com.apple.quarantine Arto_*.dmg

            # Open the DMG normally
            open Arto_*.dmg
            ```

            ### Why This Happens
            This application uses ad-hoc code signing instead of an Apple Developer ID certificate. The app is safe to use, but macOS requires manual approval for such applications.

            For more information, see the [README](https://github.com/${{ github.repository }}).
